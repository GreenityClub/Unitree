import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Location from 'expo-location';
import ENV from '../config/env';

const LOCATION_STORAGE_KEY = 'last_known_location';

// Interface cho d·ªØ li·ªáu v·ªã tr√≠
export interface LocationData {
  latitude: number;
  longitude: number;
  accuracy?: number;
  timestamp: string;
  campus?: string;
  isValid?: boolean;
}

/**
 * L∆∞u v·ªã tr√≠ hi·ªán t·∫°i v√†o AsyncStorage
 * @param location D·ªØ li·ªáu v·ªã tr√≠ c·∫ßn l∆∞u
 * @returns true n·∫øu l∆∞u th√†nh c√¥ng, false n·∫øu c√≥ l·ªói
 */
export const saveLocationToStorage = async (location: any): Promise<boolean> => {
  try {
    // Chu·∫©n h√≥a d·ªØ li·ªáu v·ªã tr√≠
    const locationData: LocationData = {
      latitude: location.latitude || location.coords?.latitude,
      longitude: location.longitude || location.coords?.longitude,
      accuracy: location.accuracy || location.coords?.accuracy || 0,
      timestamp: new Date().toISOString(),
      campus: location.campus
    };

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa v·ªã tr√≠
    locationData.isValid = isLocationOnCampus(locationData);

    // L∆∞u v√†o AsyncStorage
    await AsyncStorage.setItem(LOCATION_STORAGE_KEY, JSON.stringify(locationData));
    console.log('üìç Location saved to storage:', locationData);
    return true;
  } catch (error) {
    console.error('‚ùå Failed to save location to storage:', error);
    return false;
  }
};

/**
 * L·∫•y v·ªã tr√≠ ƒë√£ l∆∞u t·ª´ AsyncStorage
 * @returns D·ªØ li·ªáu v·ªã tr√≠ ƒë√£ l∆∞u ho·∫∑c null n·∫øu kh√¥ng c√≥
 */
export const getLocationFromStorage = async (): Promise<LocationData | null> => {
  try {
    const locationString = await AsyncStorage.getItem(LOCATION_STORAGE_KEY);
    if (locationString) {
      const locationData = JSON.parse(locationString) as LocationData;
      return locationData;
    }
    return null;
  } catch (error) {
    console.error('‚ùå Failed to get location from storage:', error);
    return null;
  }
};

/**
 * L·∫•y v·ªã tr√≠ hi·ªán t·∫°i v√† l∆∞u v√†o storage
 * @returns V·ªã tr√≠ hi·ªán t·∫°i ho·∫∑c null n·∫øu kh√¥ng th·ªÉ l·∫•y
 */
export const getCurrentAndSaveLocation = async (): Promise<LocationData | null> => {
  try {
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠
    const { status } = await Location.getForegroundPermissionsAsync();
    if (status !== 'granted') {
      console.log('‚ö†Ô∏è Location permission not granted');
      return null;
    }

    // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
    const location = await Location.getCurrentPositionAsync({
      accuracy: Location.Accuracy.Balanced
    });

    if (location && location.coords) {
      const locationData: LocationData = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        accuracy: location.coords.accuracy,
        timestamp: new Date().toISOString()
      };

      // Ki·ªÉm tra xem v·ªã tr√≠ c√≥ trong campus kh√¥ng
      locationData.isValid = isLocationOnCampus(locationData);
      locationData.campus = locationData.isValid ? 'main_campus' : 'off_campus';

      // L∆∞u v·ªã tr√≠ v√†o storage
      await saveLocationToStorage(locationData);
      return locationData;
    }
    return null;
  } catch (error) {
    console.error('‚ùå Failed to get current location:', error);
    return null;
  }
};

/**
 * Ki·ªÉm tra xem v·ªã tr√≠ c√≥ n·∫±m trong khu√¥n vi√™n tr∆∞·ªùng hay kh√¥ng
 * @param location D·ªØ li·ªáu v·ªã tr√≠ c·∫ßn ki·ªÉm tra
 * @returns true n·∫øu v·ªã tr√≠ n·∫±m trong khu√¥n vi√™n tr∆∞·ªùng, false n·∫øu kh√¥ng
 */
export const isLocationOnCampus = (location: LocationData): boolean => {
  if (!location || !location.latitude || !location.longitude) {
    return false;
  }

  // T√≠nh kho·∫£ng c√°ch ƒë·∫øn t·ªça ƒë·ªô tr∆∞·ªùng
  const distance = calculateDistance(
    location.latitude,
    location.longitude,
    ENV.UNIVERSITY_LAT,
    ENV.UNIVERSITY_LNG
  );

  // Ki·ªÉm tra n·∫øu n·∫±m trong b√°n k√≠nh cho ph√©p
  const isWithinRadius = distance <= ENV.UNIVERSITY_RADIUS;
  console.log(`üìç Location distance to campus: ${distance.toFixed(0)}m, within radius: ${isWithinRadius}`);
  
  return isWithinRadius;
};

/**
 * T√≠nh kho·∫£ng c√°ch gi·ªØa hai ƒëi·ªÉm tr√™n b·∫£n ƒë·ªì s·ª≠ d·ª•ng c√¥ng th·ª©c Haversine
 * @param lat1 Vƒ© ƒë·ªô ƒëi·ªÉm 1
 * @param lon1 Kinh ƒë·ªô ƒëi·ªÉm 1
 * @param lat2 Vƒ© ƒë·ªô ƒëi·ªÉm 2
 * @param lon2 Kinh ƒë·ªô ƒëi·ªÉm 2
 * @returns Kho·∫£ng c√°ch t√≠nh b·∫±ng m√©t
 */
export const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
  const R = 6371e3; // B√°n k√≠nh Tr√°i ƒê·∫•t (m√©t)
  const œÜ1 = (lat1 * Math.PI) / 180;
  const œÜ2 = (lat2 * Math.PI) / 180;
  const ŒîœÜ = ((lat2 - lat1) * Math.PI) / 180;
  const ŒîŒª = ((lon2 - lon1) * Math.PI) / 180;

  const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
          Math.cos(œÜ1) * Math.cos(œÜ2) *
          Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c;

  return distance;
};

export default {
  saveLocationToStorage,
  getLocationFromStorage,
  getCurrentAndSaveLocation,
  isLocationOnCampus,
  calculateDistance
}; 